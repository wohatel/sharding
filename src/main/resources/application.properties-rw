server.port=8080
#sharding的配置
spring.shardingsphere.props.sql.show=true
spring.shardingsphere.datasource.names=m1,m2,master,slave
spring.main.allow-bean-definition-overriding=true
#数据源1
spring.shardingsphere.datasource.m1.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.jdbc-url=jdbc:mysql://localhost:3306/sandbox?useSSL=true
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456
#数据源2
spring.shardingsphere.datasource.m2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.jdbc-url=jdbc:mysql://localhost:3307/sandbox?useSSL=true
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123456
#数据源master
spring.shardingsphere.datasource.master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master.jdbc-url=jdbc:mysql://localhost:3306/sandbox?useSSL=true
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=123456
#slave
spring.shardingsphere.datasource.slave.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.slave.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave.jdbc-url=jdbc:mysql://localhost:3307/sandbox?useSSL=true
spring.shardingsphere.datasource.slave.username=root
spring.shardingsphere.datasource.slave.password=123456
#分库策略
spring.shardingsphere.sharding.tables.ts_case.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.ts_case.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
#分片切入点
spring.shardingsphere.sharding.tables.ts_case.actual-data-nodes=m$->{1..2}.ts_case_$->{1..2}
spring.shardingsphere.sharding.tables.ts_user.actual-data-nodes=m1.ts_user
#分片建
spring.shardingsphere.sharding.tables.ts_case.key-generator.column=id
spring.shardingsphere.sharding.tables.ts_case.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.ts_user.key-generator.column=id
spring.shardingsphere.sharding.tables.ts_user.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.ts_dict.key-generator.column=id
spring.shardingsphere.sharding.tables.ts_dict.key-generator.type=SNOWFLAKE
#分片策略
spring.shardingsphere.sharding.tables.ts_case.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.ts_case.table-strategy.inline.algorithm-expression=ts_case_$->{id % 2 + 1}
spring.shardingsphere.sharding.tables.ts_user.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.ts_user.table-strategy.inline.algorithm-expression=ts_user
#公共表
spring.shardingsphere.sharding.broadcast-tables=ts_dict
##读写分离
spring.shardingsphere.sharding.tables.ts_rw.key-generator.column=id
spring.shardingsphere.sharding.tables.ts_rw.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.master-slave-rules.rw.master-data-source-name=master
spring.shardingsphere.sharding.master-slave-rules.rw.slave-data-source-names=slave
spring.shardingsphere.sharding.tables.ts_rw.actual-data-nodes=rw.ts_rw